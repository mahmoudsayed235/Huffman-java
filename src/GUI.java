/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUI.java
 *
 * Created on Oct 22, 2010, 11:56:41 PM
 */

/**
 *
 * @author Midoyass
 */
import java.io.*;
import java.io.IOException;
import java.util.*;
import java.util.StringTokenizer;
public class GUI extends javax.swing.JFrame {

    /** Creates new form GUI */
    public GUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CompressTxt = new javax.swing.JTextField();
        Compress = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        Decompress = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CompressArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        DecompressArea = new javax.swing.JTextArea();
        Exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(0, 204, 153));

        jTextField1.setEditable(false);

        jLabel1.setFont(new java.awt.Font("Bernard MT Condensed", 0, 18)); // NOI18N
        jLabel1.setText("Welcome To My Programe");

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 3, 48));
        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("Huffman");

        CompressTxt.setFont(new java.awt.Font("Cooper Black", 0, 14));
        CompressTxt.setForeground(new java.awt.Color(204, 0, 0));

        Compress.setBackground(new java.awt.Color(0, 0, 0));
        Compress.setForeground(new java.awt.Color(255, 255, 255));
        Compress.setText("Compress");
        Compress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompressActionPerformed(evt);
            }
        });

        Clear.setBackground(new java.awt.Color(0, 0, 0));
        Clear.setForeground(new java.awt.Color(255, 255, 255));
        Clear.setText("Clear All");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        Decompress.setBackground(new java.awt.Color(0, 0, 0));
        Decompress.setForeground(new java.awt.Color(255, 255, 255));
        Decompress.setText("Decompress");
        Decompress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecompressActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Forte", 0, 24));
        jLabel3.setForeground(new java.awt.Color(0, 51, 204));
        jLabel3.setText("Compress Area");

        jLabel4.setFont(new java.awt.Font("Forte", 0, 24));
        jLabel4.setForeground(new java.awt.Color(0, 51, 204));
        jLabel4.setText("Decompress Area");

        CompressArea.setColumns(20);
        CompressArea.setEditable(false);
        CompressArea.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14));
        CompressArea.setForeground(new java.awt.Color(0, 51, 204));
        CompressArea.setRows(5);
        jScrollPane1.setViewportView(CompressArea);

        DecompressArea.setColumns(20);
        DecompressArea.setEditable(false);
        DecompressArea.setFont(new java.awt.Font("DokChampa", 3, 14));
        DecompressArea.setForeground(new java.awt.Color(0, 51, 204));
        DecompressArea.setRows(5);
        jScrollPane2.setViewportView(DecompressArea);

        Exit.setBackground(new java.awt.Color(0, 0, 0));
        Exit.setForeground(new java.awt.Color(255, 255, 255));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(84, 84, 84)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(21, 21, 21)
                                    .addComponent(CompressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(41, 41, 41))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addGap(57, 57, 57)
                                    .addComponent(Decompress, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(51, 51, 51)
                                    .addComponent(Compress)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Clear)))
                            .addGap(76, 76, 76)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(CompressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Compress)
                    .addComponent(Clear))
                .addGap(49, 49, 49)
                .addComponent(Decompress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(Exit)
                .addGap(24, 24, 24))
            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CompressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompressActionPerformed

        FileOutputStream out;
        PrintWriter outputFile,outputFile2,noOfBits ;
        BitOutputStream BOS;
        try{
      out=new FileOutputStream("BitsFile.txt");
      BOS=new BitOutputStream(out);
       noOfBits=new PrintWriter("No Of Bits.txt");
       outputFile = new PrintWriter("Table.txt");
       outputFile2 = new PrintWriter("Compress.txt");
        Scanner kb = new Scanner(System.in);
        String data = "";
          String k="";
        String dict = "";
        String comp="";
        ArrayList<String> ch = new ArrayList();
        ArrayList<Integer> in = new ArrayList();
        int count=0;
        char[] array;
        String  mmm="";

        data = this.CompressTxt.getText();
        array = data.toCharArray();
        ArrayList<String> dic = new ArrayList();
        for (int i = 0; i <= 255; i++) {
            dict += (char) i;
            dic.add(dict);
            dict = "";
        }
        for (int i = 0; i < dic.size(); i++) {
            for(int j=0;j<data.length();j++)
        {
         comp+=array[j];
        if(comp.equals(dic.get(i)))
        {
        count++;
        }
        comp="";

        }
        if(count>0)
        {
        ch.add(dic.get(i));
        in.add(count);
        }
        count=0;
        }
        int s;
        String d="";
        for(int i=0;i<in.size();i++)
        {
        for(int j=i+1;j<in.size();j++)
        {
        if(in.get(i)<in.get(j))
        {
         //   System.out.println(in.get(i)+"-----"+in.get(j));
        s=in.get(i);
        d=ch.get(i);
        in.set(i, in.get(j));
        ch.set(i, ch.get(j));
        in.set(j, s);
        ch.set(j, d);
        }

        }

        }
       String [] copy=new String [ch.size()];
       int [] copy_in=new int[in.size()];
        for (int i = 0; i < copy.length; i++) {
            copy[i]=ch.get(i);
            copy_in[i]=in.get(i);
        }
       /*
        for (int i = 0; i < in.size(); i++) {
            System.out.println(copy[i]+ "    ..    "+copy_in[i]);

        }
       */
       while(in.size()>2)
       {
       in.set(in.size()-2,in.get(in.size()-1)+in.get(in.size()-2) );
       in.remove(in.size()-1);
       ch.set(ch.size()-1,(ch.get(ch.size()-2)+"+"+ch.get(ch.size()-1)));
       ch.remove(ch.size()-2);
        //int s;
        //String d="";
        for(int i=0;i<in.size();i++)
        {
        for(int j=i+1;j<in.size();j++)
        {
        if(in.get(i)<in.get(j))
        {
         //   System.out.println(in.get(i)+"-----"+in.get(j));
        s=in.get(i);
        d=ch.get(i);
        in.set(i, in.get(j));
        ch.set(i, ch.get(j));
        in.set(j, s);
        ch.set(j, d);
        }

        }
       }
       }
      System.out.println(ch);
     //  System.out.println(in);

  String str1=ch.get(0);
  String str2=ch.get(1);
//System.out.println(str2);
//System.out.println(str1);

int j=0;
int dummy2=0;
StringTokenizer stoke2=new StringTokenizer(str2,"+");
int m2=stoke2.countTokens();
String[]binary2=new String[m2];
String st2;
int[] kl2=new int[m2];
char[]ch1=new char[m2];
while(stoke2.hasMoreTokens()){
st2=stoke2.nextToken();
ch1[j]=st2.charAt(0);
if(j==0){
kl2[j]=10;
dummy2=kl2[j]+1;
}
if((j>0)&&(j<(m2-1))){
kl2[j]=dummy2*10;
dummy2=kl2[j]+1;
}
if(j==(m2-1)){
kl2[j]=dummy2;
}
binary2[j]=kl2[j]+"";
j++;
}

for(int h=0;h<m2;h++){
System.out.println(ch1[h]);
System.out.println(binary2[h]);
}

StringTokenizer stoke=new StringTokenizer(str1,"+");
int i=0;
int dummy=0;

//System.out.println(dummy);
int m=stoke.countTokens();
int[]kl=new int[m];
String st ;
String[] binary=new String[m];
char []ch0=new char[m];
//char []ch1=new char[n];
while(stoke.hasMoreTokens()){
 st=stoke.nextToken();
 ch0[i]=st.charAt(0);

if(i==0){
kl[i]=0;
dummy=kl[i]+1;
binary[i]="0";
continue;
}
if((i>0)&&(i<(m-1))){
kl[i]=dummy*10;
dummy=kl[i]+1;
}
if(i==(m-1)){
kl[i]=dummy;
}
 binary[i]="0"+kl[i];

 i++;
}
for(int h=0;h<m;h++){
System.out.println(ch0[h]);
System.out.println(binary[h]);

}
char[]gdwal=new char[m+m2];
String[]code=new String[m+m2];
for(int q=0;q<m;q++){
code[q]=binary[q];
gdwal[q]=ch0[q];
}
for(int z=0;z<m2;z++){
code[m+z]=binary2[z];
gdwal[m+z]=ch1[z];
}

int bits;
int number;
String adiiha=""; //dh fih al code bat3 alstring ali d5loo aluser (fih alt7wiila)
for(int x=0;x<array.length;x++){//////array dh ali fi al string ali mad5loo al user
for(int y=0;y<gdwal.length;y++){
if(array[x]==gdwal[y]){

adiiha+=code[y];
}
}
}
char [] num=new char [adiiha.length()];
outputFile2.println(adiiha);
String ko="";
num=adiiha.toCharArray();
        for (int l = 0; l < adiiha.length(); l++) {
            ko+=num[l];
        number=Integer.parseInt(ko);
        bits=BitOutputStream.getRequiredNumOfBits(number);
        BOS.writeBits(number, bits);
        noOfBits.println(bits);
        ko="";
        }
for(int x=0;x<code.length;x++){
mmm+=gdwal[x];
}
outputFile.println(mmm);
for(int x=0;x<code.length;x++){

outputFile.println(code[x]);

}
this.CompressArea.setText(adiiha);
noOfBits.close();
BOS.flush();
BOS.close();
outputFile.close();
outputFile2.close();
        }
        catch(IOException e)
        {
        e.getMessage();

        }

    }//GEN-LAST:event_CompressActionPerformed

    private void DecompressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecompressActionPerformed
        /////////////////////////////////////////
       try{
        File file = new File("Table.txt");
      Scanner inputFile = new Scanner(file);
       File file2 = new File("Compress.txt");
        File indexFile = new File("No Of Bits.txt");
        FileInputStream in;
        BitInputStream BIS;
       int number;
        int [] index=new int [300];
        String dummy2="";
        in=new FileInputStream("BitsFile.txt");
         BIS=new BitInputStream(in);
         Scanner inputFile3=new Scanner(indexFile);
      Scanner inputFile2 = new Scanner(file2);
       String dummy="";
      char[] gdwal = null;
      char []array = new char[300];
      ArrayList<String>al=new ArrayList();
      int i=0;
      int q=0;
      int count=0;
     while(inputFile3.hasNext())
     {
     dummy2=inputFile3.nextLine();
     number=Integer.parseInt(dummy2);
     index[count]=number;
     count++;
     }
      int counter=0;
      String convert="";
           while(counter<=count)
      {
                try {
                    convert += BIS.readBits(index[counter]); // bab3tlaha 3dd el bits elly ana msave feha el rqm w hia betrg3ly el rqm
                    counter++;
                } catch (IOException ex) {
                    ex.getMessage();
                }

      }
          //dummy=inputFile2.nextLine();// dh ha5liiiiiiiiiiiiih string btaa3 binary code ali 3amltaha
           array=convert.toCharArray();

      while(inputFile.hasNext()){

          if(i==0){
       dummy=inputFile.nextLine();/// al7roof ali f algdwaal
          gdwal=dummy.toCharArray();
          }

          if(i>0){
              dummy=inputFile.nextLine();
              al.add(q, dummy);
              q++;
          }
         i++;
      }
      int sum=al.size();
      String[]code=new String[sum];
      for(int j=0;j<sum;j++){
      code[j]=al.get(j);
      }
      String original="";
      String useless="";
      for(int j=0;j<array.length;j++){
          useless+=array[j];
          for(int h=0;h<code.length;h++){
          if(code[h].compareTo(useless)==0){
              original+=gdwal[h];
              useless="";

          }

      }

    }
     // System.out.println(original);
       this.DecompressArea.setText(original);


       }
       catch(IOException ex)
       {
       System.out.println(ex.getMessage());

       }
        ////////////////////////////////


    }//GEN-LAST:event_DecompressActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
    this.CompressArea.setText("");
    this.CompressTxt.setText("");
    this.DecompressArea.setText("");
    }//GEN-LAST:event_ClearActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
System.exit(0);
}//GEN-LAST:event_ExitActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clear;
    private javax.swing.JButton Compress;
    private javax.swing.JTextArea CompressArea;
    private javax.swing.JTextField CompressTxt;
    private javax.swing.JButton Decompress;
    private javax.swing.JTextArea DecompressArea;
    private javax.swing.JButton Exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
